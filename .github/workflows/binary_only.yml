name: Build Binary Only
on:
  workflow_dispatch:

jobs:
  build-linux:
    name: "build-linux"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Populate vars
        id: vars
        run: |
          echo "build_date=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
          echo "short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "artifacts_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"" >> $GITHUB_OUTPUT
          echo "bridge_version=$(cat VERSION)" >> $GITHUB_OUTPUT
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies Common
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends golang
          sudo apt install -y ruby-dev rpm tar xz-utils
          sudo gem i fpm -f --no-document

      - name: Install Dependencies X86 X64
        run: |
          sudo apt install -y --no-install-recommends gcc-multilib

      - name: Build X86 X64
        run: |
          export CGO_ENABLED=1 GOOS=linux GOARCH=amd64 CC="gcc"
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}" .
          export CGO_ENABLED=1 GOOS=linux GOARCH=386 CC="gcc"
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_i${GOARCH}" .

      - name: Install Dependencies ARM (could not coexist with gcc-multilib)
        run: |
          sudo apt install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu cpp-aarch64-linux-gnu binutils-aarch64-linux-gnu
          sudo apt install -y --no-install-recommends gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf cpp-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
          sudo apt install -y --no-install-recommends gcc-arm-linux-gnueabi g++-arm-linux-gnueabi cpp-arm-linux-gnueabi binutils-arm-linux-gnueabi

      - name: Build ARM
        run: |
          export CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC="aarch64-linux-gnu-gcc"
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}" .
          export CGO_ENABLED=1 GOOS=linux GOARCH=arm CC="arm-linux-gnueabihf-gcc"
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}hf" .
          export CGO_ENABLED=1 GOOS=linux GOARCH=arm CC="arm-linux-gnueabi-gcc"
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}" .

      - name: Move and zip artifacts
        run: |
          mkdir artifacts
          mv chargerwalletd_* artifacts/
          # zip -rj artifacts.zip artifacts/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.repository.name }}-${{ steps.vars.outputs.bridge_version }}-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.short_hash }}-binary-files"
          path: |
            artifacts/*

      # - name: Notify to Slack
      #   uses: chargerwallethq/actions/notice-slack-app-update@main
      #   with:
      #     web-hook-url: ${{ secrets.SLACK_DEV_RELEASE_WEBHOOK }}
      #     artifact-type: TOUCH-FIRMWARE-BT
      #     artifact-name: Touch-Hardware-Firmware-BT
      #     artifact-bundle-id: "com.chargerwallet.firmware.touch.bt"
      #     artifact-version-name: "${{ steps.vars.outputs.bridge_version }}"
      #     artifact-version-code: "${{ steps.vars.outputs.short_hash }}"
      #     artifact-download-url: "${{ steps.vars.outputs.artifacts_url }}"
      #     change-log: "Download [Artifacts] at the bottom of page."
      #     custom-issue-url: ""
      #     custom-message-title: ""
      #     custom-message-payload: ""
      #     filter-code: false

  build-windows:
    name: "build-windows"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Populate vars
        id: vars
        run: |
          echo "build_date=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
          echo "short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "artifacts_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"" >> $GITHUB_OUTPUT
          echo "bridge_version=$(cat VERSION)" >> $GITHUB_OUTPUT
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends build-essential wget msitools dos2unix libtool nsis
          sudo apt install -y --no-install-recommends gcc-multilib
          sudo apt install -y --no-install-recommends gcc-mingw-w64 g++-mingw-w64 binutils-mingw-w64 mingw-w64-common mingw-w64-i686-dev mingw-w64-x86-64-dev
          sudo apt install -y --no-install-recommends automake autoconf autotools-dev autoconf-archive

      - name: Build
        run: |
          export CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC="x86_64-w64-mingw32-gcc"
          go build -ldflags="-H windowsgui -X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}.exe" .
          export CGO_ENABLED=1 GOOS=windows GOARCH=386 CC="i686-w64-mingw32-gcc"
          go build -ldflags="-H windowsgui -X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_i${GOARCH}.exe" .

      - name: Move and zip artifacts
        run: |
          mkdir artifacts
          mv chargerwalletd_* artifacts/
          # zip -rj artifacts.zip artifacts/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.repository.name }}-${{ steps.vars.outputs.bridge_version }}-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.short_hash }}-binary-files"
          path: |
            artifacts/*

      # - name: Notify to Slack
      #   uses: chargerwallethq/actions/notice-slack-app-update@main
      #   with:
      #     web-hook-url: ${{ secrets.SLACK_DEV_RELEASE_WEBHOOK }}
      #     artifact-type: TOUCH-FIRMWARE-BT
      #     artifact-name: Touch-Hardware-Firmware-BT
      #     artifact-bundle-id: "com.chargerwallet.firmware.touch.bt"
      #     artifact-version-name: "${{ steps.vars.outputs.bridge_version }}"
      #     artifact-version-code: "${{ steps.vars.outputs.short_hash }}"
      #     artifact-download-url: "${{ steps.vars.outputs.artifacts_url }}"
      #     change-log: "Download [Artifacts] at the bottom of page."
      #     custom-issue-url: ""
      #     custom-message-title: ""
      #     custom-message-payload: ""
      #     filter-code: false

  build-macos:
    name: "build-macos"
    runs-on: macos-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Populate vars
        id: vars
        run: |
          echo "build_date=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
          echo "short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "artifacts_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"" >> $GITHUB_OUTPUT
          echo "bridge_version=$(cat VERSION)" >> $GITHUB_OUTPUT
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      # - name: Install Dependencies
      #   run: |
      #     # not needed

      - name: Build
        run: |
          export CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 CC=""
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}" .
          export CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 CC=""
          go build -ldflags="-X 'main.version=$VERSION'" -v -o "chargerwalletd_${GOOS}_${GOARCH}" .

      - name: Move and zip artifacts
        run: |
          mkdir artifacts
          mv chargerwalletd_* artifacts/
          # zip -rj artifacts.zip artifacts/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.repository.name }}-${{ steps.vars.outputs.bridge_version }}-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.short_hash }}-binary-files"
          path: |
            artifacts/*

      # - name: Notify to Slack
      #   uses: chargerwallethq/actions/notice-slack-app-update@main
      #   with:
      #     web-hook-url: ${{ secrets.SLACK_DEV_RELEASE_WEBHOOK }}
      #     artifact-type: TOUCH-FIRMWARE-BT
      #     artifact-name: Touch-Hardware-Firmware-BT
      #     artifact-bundle-id: "com.chargerwallet.firmware.touch.bt"
      #     artifact-version-name: "${{ steps.vars.outputs.bridge_version }}"
      #     artifact-version-code: "${{ steps.vars.outputs.short_hash }}"
      #     artifact-download-url: "${{ steps.vars.outputs.artifacts_url }}"
      #     change-log: "Download [Artifacts] at the bottom of page."
      #     custom-issue-url: ""
      #     custom-message-title: ""
      #     custom-message-payload: ""
      #     filter-code: false